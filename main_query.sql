CREATE TABLE CARTELE(
	id SERIAL PRIMARY KEY);

CREATE TABLE ABONAMENTE(
	abon_id SERIAL NOT NULL,
    zile TINYINT UNSIGNED NOT NULL,
    blocat BOOLEAN NOT NULL DEFAULT FALSE,
    
    FOREIGN KEY (abon_id) REFERENCES CARTELE(id) ON DELETE CASCADE ON UPDATE CASCADE);

CREATE TABLE CARTELE_CALATORII(
	cc_id SERIAL NOT NULL,
    max_calatorii TINYINT UNSIGNED NOT NULL,
    calatorii TINYINT UNSIGNED NOT NULL DEFAULT 0,

	FOREIGN KEY (cc_id) REFERENCES CARTELE(id) ON DELETE CASCADE ON UPDATE CASCADE);

CREATE TABLE CARTELE_EXPIRATE(
	id SERIAL PRIMARY KEY);

DROP TABLE ABONAMENTE;
DROP TABLE CARTELE_CALATORII;
DROP TABLE CARTELE;
DROP TABLE CARTELE_EXPIRATE;

DELIMITER $$
CREATE TRIGGER adauga_cartele AFTER INSERT ON cartele
FOR EACH ROW
BEGIN
	DELETE FROM cartele_expirate
    WHERE id = NEW.id;
END; $$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER adauga_cartele_din_abon BEFORE INSERT ON abonamente
FOR EACH ROW
BEGIN
	INSERT INTO cartele VALUES (NEW.abon_id);
END;$$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER adauga_cartele_din_cc BEFORE INSERT ON cartele_calatorii
FOR EACH ROW
BEGIN
	INSERT INTO cartele VALUES (NEW.cc_id);
END; $$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER sterge_cartele_epuizate AFTER UPDATE ON cartele_calatorii
FOR EACH ROW
BEGIN
	IF NEW.calatorii <= 0 THEN
		DELETE FROM cartele
		WHERE id = NEW.cc_id;
        INSERT INTO cartele_expirate
        VALUES (NEW.cc_id);
	END IF;
END; $$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER abon_pune_timestamp BEFORE UPDATE ON abonamente
FOR EACH ROW
BEGIN
	IF NEW.blocat = true THEN
		SET NEW.blocat_date = SYSDATE();
	END IF;
END; $$
DELIMITER ;

CREATE TRIGGER seteaza_calatorii_la_adaugare BEFORE INSERT ON cartele_calatorii
FOR EACH ROW SET NEW.calatorii = NEW.max_calatorii;

CREATE EVENT IF NOT EXISTS deblocare_cartele
ON SCHEDULE EVERY 1 MINUTE
STARTS SYSDATE()
DO
	UPDATE abonamente
    SET blocat = false
    WHERE blocat = true AND SYSDATE() - blocat_date >= 15 * 60;
